using Tones.Managers;using UnityEngine;using UnityEngine.UI;public class ExperimentalConfigManager : MonoBehaviour{    #region AgudasGraves    enum RF    {        Agudas, Graves    }    [SerializeField]    Text TextRF=null;    [SerializeField]    Button DownRF, UpRF;    RF currentRF = RF.Agudas;    #endregion    #region VolumenInicial    [SerializeField]    Text TextVI=null;    [SerializeField]    Button DownVI= null, UpVI= null;    readonly int dbDelta = 5;    readonly int dbMin = 0, dbMax = 100;    int currentVI = 10;    #endregion    #region NumeroDeTonos    [SerializeField]    Text TextNT= null;    [SerializeField]    Button DownNT= null, UpNT= null;    readonly int NTmin = 1, NTmax = 3;    readonly int NTdelta = 1;    int currentNT = 3;    #endregion    #region TiempoEntreTonos    [SerializeField]    Text TextTET= null;    [SerializeField]    Button DownTET= null, UpTET= null;    readonly float TETmin = 1, TETmax = 2.5f;    readonly float TETdelta = .5f;    float currentTET = 1.5f;    #endregion    #region TonosCortos    [SerializeField]    Text TextTC= null;    [SerializeField]    Button DownTC= null, UpTC= null;    readonly float TCmin = .5f, TCmax = 2;    readonly float TCdelta = .5f;    float currentTC = 1;    #endregion    #region TonosLargos    [SerializeField]    Text TextTL= null;    [SerializeField]    Button DownTL= null, UpTL= null;    readonly float TLmin = 2.5f, TLmax = 4;    readonly float TLdelta = .5f;    float currentTL = 3;    #endregion    private void IncreaseIntValue(ref int current, int delta, int max, Button up, Button down)    {        if (current < max)        {            current += delta;            if (current >= max)                up.interactable = false;            if (!down.interactable)                down.interactable = true;        }    }    private void DecreaseIntValue(ref int current, int delta, int min, Button up, Button down)    {        if (current > min)        {            current -= delta;            if (current <= min)                down.interactable = false;            if (!up.interactable)                up.interactable = true;        }    }    private void IncreaseFloatValue(ref float current, float delta, float max, Button up, Button down)    {        if (current < max)        {            current += delta;            if (current >= max)                up.interactable = false;            if (!down.interactable)                down.interactable = true;        }    }    private void DecreaseFloatValue(ref float current, float delta, float min, Button up, Button down)    {        if (current > min)        {            current -= delta;            if (current <= min)                down.interactable = false;            if (!up.interactable)                up.interactable = true;        }    }    //Control del rango frecuencial - RF    public void ToggleRF()    {        if (currentRF == RF.Agudas)            currentRF = RF.Graves;        else            currentRF = RF.Agudas;                TextRF.text = currentRF.ToString();    }    //Control del volumen inicial - VI    public void IncreaseVolume()    {        IncreaseIntValue(ref currentVI, dbDelta, dbMax, UpVI, DownVI);        UpdateDBUI();    }    public void DecreaseVolume()    {        DecreaseIntValue(ref currentVI, dbDelta, dbMin, UpVI, DownVI);        UpdateDBUI();    }    private void UpdateDBUI()    {        TextVI.text = currentVI + "dB";    }    //Control del numero de tonos - NT    public void IncreaseNumberOfTones()    {        IncreaseIntValue(ref currentNT, NTdelta, NTmax, UpNT, DownNT);        UpdateNTUI();    }    public void DecreaseNumberOfTones()    {        DecreaseIntValue(ref currentNT, NTdelta, NTmin, UpNT, DownNT);        UpdateNTUI();    }    private void UpdateNTUI()    {        TextNT.text = currentNT.ToString();    }    //Control del tiempo entre tonos - TET    public void IncreaseTimeBetweenTones()    {        IncreaseFloatValue(ref currentTET, TETdelta, TETmax, UpTET, DownTET);        UpdateTETUI();    }    public void DecreaseTimeBetweenTones()    {        DecreaseFloatValue(ref currentTET, TETdelta, TETmin, UpTET, DownTET);        UpdateTETUI();    }    private void UpdateTETUI()    {        TextTET.text = currentTET + "s";    }    //Control de la duracion de los tonos cortos - TC    public void IncreaseShortTones()    {        IncreaseFloatValue(ref currentTC, TCdelta, TCmax, UpTC, DownTC);        UpdateTCUI();    }    public void DecreaseShortTones()    {        DecreaseFloatValue(ref currentTC, TCdelta, TCmin, UpTC, DownTC);        UpdateTCUI();    }    private void UpdateTCUI()    {        TextTC.text = currentTC + "s";    }    //Control de la duracion de los tonos largos - TL    public void IncreaseLongTones()    {        IncreaseFloatValue(ref currentTL, TLdelta, TLmax, UpTL, DownTL);        UpdateTLUI();    }    public void DecreaseLongTones()    {        DecreaseFloatValue(ref currentTL, TLdelta, TLmin, UpTL, DownTL);        UpdateTLUI();    }    private void UpdateTLUI()    {        TextTL.text = currentTL + "s";    }}